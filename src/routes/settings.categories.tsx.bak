import { createFileRoute } from '@tanstack/react-router'
import { useState } from 'react'
import AuthForm from '../components/AuthForm'
import AppLayout from '../components/AppLayout'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import {
  useSession,
  useAllCategories,
  useUserCategories,
  useAddUserCategory,
  useRemoveUserCategory
} from '@/lib/hooks'
import { useQueryClient } from '@tanstack/react-query'
import type { Category } from '../db/schema'

export const Route = createFileRoute('/settings/categories')({
  component: CategorySettingsPage,
})

interface CategorySettingsProps {
  userId: string
}

function CategorySettings({ userId }: CategorySettingsProps) {
  const { data: allCategories, isLoading: allCategoriesLoading } = useAllCategories()
  const { data: userCategories, isLoading: userCategoriesLoading } = useUserCategories(userId)
  const addUserCategory = useAddUserCategory()
  const removeUserCategory = useRemoveUserCategory()

  const userCategoryIds = new Set(userCategories?.map(uc => uc.categoryId) || [])

  const handleCategoryToggle = async (categoryId: number, isChecked: boolean) => {
    try {
      if (isChecked) {
        await addUserCategory.mutateAsync({ userId, categoryId })
      } else {
        await removeUserCategory.mutateAsync({ userId, categoryId })
      }
    } catch (error) {
      console.error('Failed to update category:', error)
    }
  }

  if (allCategoriesLoading || userCategoriesLoading) {
    return (
      <Card>
        <CardContent className="p-8 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading categories...</p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Expense Categories</CardTitle>
        <p className="text-sm text-muted-foreground">
          Select which categories you want to appear in your expense form. You need at least one category selected.
        </p>
      </CardHeader>
      <CardContent>
        {!allCategories || allCategories.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-4xl mb-2">ðŸ“‹</div>
            <h3 className="text-lg font-semibold mb-2">No categories available</h3>
            <p className="text-muted-foreground mb-4">It looks like the categories haven't been loaded properly.</p>
            <Button onClick={() => window.location.reload()}>
              Reload Page
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            {allCategories?.map((category) => {
              const isSelected = userCategoryIds.has(category.id)
              const isUpdating = addUserCategory.isPending || removeUserCategory.isPending
              
              return (
                <div key={category.id} className="flex items-center space-x-3 p-3 border border-border rounded-lg hover:bg-muted/20 transition-colors">
                  <Checkbox
                    id={category.id.toString()}
                    checked={isSelected}
                    disabled={isUpdating}
                    onCheckedChange={(checked) =>
                      handleCategoryToggle(category.id, checked as boolean)
                    }
                  />
                  <label
                    htmlFor={category.id.toString()}
                    className="flex-1 flex items-center gap-3 text-sm cursor-pointer"
                  >
                    <span className="text-lg">{category.icon}</span>
                    <span className="font-medium">{category.label}</span>
                  </label>
                </div>
              )
            })}
          </div>
        )}
      </CardContent>
    </Card>
  )
}

function CategorySettingsPage() {
  const { data: session, isLoading: sessionLoading } = useSession()
  const queryClient = useQueryClient()

  const handleAuthSuccess = () => {
    queryClient.invalidateQueries({ queryKey: ['session'] })
  }

  if (sessionLoading) {
    return (
      <AppLayout>
        <Card>
          <CardContent className="p-8 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading...</p>
          </CardContent>
        </Card>
      </AppLayout>
    )
  }

  if (!session?.data?.user) {
    return (
      <AppLayout>
        <div className="flex items-center justify-center min-h-[60vh]">
          <AuthForm onSuccess={handleAuthSuccess} />
        </div>
      </AppLayout>
    )
  }

  return (
    <AppLayout
      title="Category Settings"
      showBackButton
    >
      <CategorySettings userId={session.data.user.id} />
    </AppLayout>
  )
}