/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ExpensesRouteImport } from './routes/expenses'
import { Route as CategoriesRouteImport } from './routes/categories'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BudgetBudgetIdRouteImport } from './routes/budget.$budgetId'
import { Route as BudgetCreateInfoRouteImport } from './routes/budget.create.info'
import { Route as BudgetCreateCategoriesRouteImport } from './routes/budget.create.categories'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ExpensesRoute = ExpensesRouteImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesRoute = CategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BudgetBudgetIdRoute = BudgetBudgetIdRouteImport.update({
  id: '/budget/$budgetId',
  path: '/budget/$budgetId',
  getParentRoute: () => rootRouteImport,
} as any)
const BudgetCreateInfoRoute = BudgetCreateInfoRouteImport.update({
  id: '/budget/create/info',
  path: '/budget/create/info',
  getParentRoute: () => rootRouteImport,
} as any)
const BudgetCreateCategoriesRoute = BudgetCreateCategoriesRouteImport.update({
  id: '/budget/create/categories',
  path: '/budget/create/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/expenses': typeof ExpensesRoute
  '/settings': typeof SettingsRoute
  '/budget/$budgetId': typeof BudgetBudgetIdRoute
  '/budget/create/categories': typeof BudgetCreateCategoriesRoute
  '/budget/create/info': typeof BudgetCreateInfoRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/expenses': typeof ExpensesRoute
  '/settings': typeof SettingsRoute
  '/budget/$budgetId': typeof BudgetBudgetIdRoute
  '/budget/create/categories': typeof BudgetCreateCategoriesRoute
  '/budget/create/info': typeof BudgetCreateInfoRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/expenses': typeof ExpensesRoute
  '/settings': typeof SettingsRoute
  '/budget/$budgetId': typeof BudgetBudgetIdRoute
  '/budget/create/categories': typeof BudgetCreateCategoriesRoute
  '/budget/create/info': typeof BudgetCreateInfoRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories'
    | '/expenses'
    | '/settings'
    | '/budget/$budgetId'
    | '/budget/create/categories'
    | '/budget/create/info'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories'
    | '/expenses'
    | '/settings'
    | '/budget/$budgetId'
    | '/budget/create/categories'
    | '/budget/create/info'
  id:
    | '__root__'
    | '/'
    | '/categories'
    | '/expenses'
    | '/settings'
    | '/budget/$budgetId'
    | '/budget/create/categories'
    | '/budget/create/info'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoriesRoute: typeof CategoriesRoute
  ExpensesRoute: typeof ExpensesRoute
  SettingsRoute: typeof SettingsRoute
  BudgetBudgetIdRoute: typeof BudgetBudgetIdRoute
  BudgetCreateCategoriesRoute: typeof BudgetCreateCategoriesRoute
  BudgetCreateInfoRoute: typeof BudgetCreateInfoRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/expenses': {
      id: '/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof ExpensesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/budget/$budgetId': {
      id: '/budget/$budgetId'
      path: '/budget/$budgetId'
      fullPath: '/budget/$budgetId'
      preLoaderRoute: typeof BudgetBudgetIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/budget/create/info': {
      id: '/budget/create/info'
      path: '/budget/create/info'
      fullPath: '/budget/create/info'
      preLoaderRoute: typeof BudgetCreateInfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/budget/create/categories': {
      id: '/budget/create/categories'
      path: '/budget/create/categories'
      fullPath: '/budget/create/categories'
      preLoaderRoute: typeof BudgetCreateCategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesRoute: CategoriesRoute,
  ExpensesRoute: ExpensesRoute,
  SettingsRoute: SettingsRoute,
  BudgetBudgetIdRoute: BudgetBudgetIdRoute,
  BudgetCreateCategoriesRoute: BudgetCreateCategoriesRoute,
  BudgetCreateInfoRoute: BudgetCreateInfoRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
